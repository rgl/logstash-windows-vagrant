# see https://www.elastic.co/guide/en/logstash/current/event-dependent-configuration.html

input {
  http {
    host => "127.0.0.1"
    port => 8080
    codec => json
    type => "http"
  }

  gelf {
    host => "127.0.0.1"
    port => 12201
    type => "gelf"
  }

  # NB by default the syslog filter only handles the older RFC3164 syslog format.
  # NB to handle RFC5424 syslog format (as used by Serilog.Sinks.Syslog).
  #    there are dragons at https://github.com/logstash-plugins/logstash-input-syslog/issues/15
  #    and https://rfc5424-logging-handler.readthedocs.io/en/latest/syslog_server.html
  syslog {
    host => "127.0.0.1"
    port => 514
    type => "syslog"
  }
}

filter {
  if [type] == "http" and [headers][request_path] == "/serilog" {
    # serilog Serilog.Sinks.Http sends logs as a log object with a batch of events alike the one sent by the examples/csharp-serilog-http application:
    #
    #   {
    #     "events": [{
    #       "Timestamp": "2019-02-26T19:57:19.6176770+00:00",
    #       "Level": "Information",
    #       "MessageTemplate": "Begin",
    #       "RenderedMessage": "Begin",
    #       "Properties": {
    #         "SourceContext": "SerilogHttp.Program",
    #         "Application": "csharp-serilog-http/1.0"
    #       }
    #     }, {
    #       "Timestamp": "2019-02-26T19:57:19.6427687+00:00",
    #       "Level": "Debug",
    #       "MessageTemplate": "Dividing {A} by {B}",
    #       "RenderedMessage": "Dividing 10 by 0",
    #       "Properties": {
    #         "A": 10,
    #         "B": 0,
    #         "SourceContext": "SerilogHttp.Program",
    #         "Application": "csharp-serilog-http/1.0",
    #         "TraceId": "f3b588fcac6d47998c70f2cb7499ed2c"
    #       }
    #     }, {
    #       "Timestamp": "2019-02-26T19:57:19.6458642+00:00",
    #       "Level": "Error",
    #       "MessageTemplate": "Something went wrong with the division",
    #       "RenderedMessage": "Something went wrong with the division",
    #       "Exception": "System.DivideByZeroException: Attempted to divide by zero.\r\n   at SerilogHttp.Program.Main(String[] args) in C:\\vagrant\\examples\\csharp-serilog-http\\Program.cs:line 50",
    #       "Properties": {
    #         "SourceContext": "SerilogHttp.Program",
    #         "Application": "csharp-serilog-http/1.0",
    #         "TraceId": "f3b588fcac6d47998c70f2cb7499ed2c"
    #       }
    #     }]
    #   }
    #
    # the logstash http plugin will augment the log object with several properties:
    #
    #   type          the type set in the configuration of the http input plugin
    #   host          the ip address of the host that sent the log message
    #   headers       headers from the http request sent by serilog
    #   @version      the event type version
    #   @timestamp    the time when logstash received the log message
    #
    # the log object will end-up being something alike:
    #
    #   {
    #     "type": "http",
    #     "host": "127.0.0.1",
    #     "@version": "1",
    #     "headers": {
    #       "http_version": "HTTP/1.1",
    #       "content_type": "application/json; charset=utf-8",
    #       "request_method": "POST",
    #       "request_path": "/",
    #       "http_user_agent": null,
    #       "http_accept": null,
    #       "content_length": "1254",
    #       "http_host": "localhost:8080"
    #     },
    #     "@timestamp": "2019-02-26T19:57:20.278Z",
    #     "events": [{
    #       ...
    #     }]
    #   }

    # remove unneeded fields.
    mutate {
      remove_field => ["headers", "host"]
    }

    # split the batch into single events (because Serilog.Sinks.Http sends log lines in batches).
    #
    # example:
    #
    #  http --verbose post 127.0.0.1:8080/serilog events:='[{"Timestamp":"2019-01-01T00:00:01.1234567+00:00","RenderedMessage":"one"},{"Timestamp":"2019-01-01T00:00:02.1234567+00:00","RenderedMessage":"two"}]'
    split {
      field => "events"
      target => "serilog"
      remove_field => "events"
    }

    # parse Timestamp as the event @timestamp.
    #
    # example:
    #
    #   http --verbose post 127.0.0.1:8080/serilog events:='[{"Timestamp":"2019-01-02T03:04:05.1234567+01:00"}]'
    #
    #  this date filter will transform:
    #    2019-01-02T03:04:05.1234567+01:00
    #  into:
    #    2019-01-02T02:04:05.123Z
    #
    # NB it correctly normalizes the timestamp to UTC
    # NB it looses a bit of precision
    date {
      match => ["[serilog][Timestamp]", "ISO8601"]
    }
  } else if [type] == "gelf" {
    mutate {
      remove_field => ["short_message"]
    }
  }

  # remove the temporay type attribute that was used to filter the filters.
  mutate {
    remove_field => ["type"]
  }
}

output {
  stdout {
    codec => json_lines
  }
  elasticsearch {
    hosts => ["127.0.0.1:9200"]
  }
}
